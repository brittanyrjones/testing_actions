name: Create Release Pull Request

on:
  # Allow manual trigger, e.g. for testing. This can be changed to a cron job in the future, or some other custom trigger.
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Check if merge is from beta branch
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          SRC_BRANCH=$(echo "$COMMIT_MSG" | grep -oE 'from [^ ]+' | awk '{print $2}')
          CLEAN_BRANCH=$(basename "$SRC_BRANCH")
          echo "Source branch: $CLEAN_BRANCH"
          if [[ -z "$CLEAN_BRANCH" ]] || [[ "$CLEAN_BRANCH" != *beta* ]]; then
            echo "Not a merge from a beta branch. Skipping workflow."
            exit 0
          fi

      - name: Strip beta from version in pyproject.toml
        run: |
          CURRENT_VERSION=$(grep -Po '^version = "\K[^"]+' pyproject.toml | head -1)
          FINAL_VERSION=$(echo "$CURRENT_VERSION" | sed -E 's/(beta.*|b[0-9]+.*)$//')
          FINAL_VERSION=$(echo "$FINAL_VERSION" | sed 's/\.$//')
          sed -i "s/^version = \".*\"/version = \"$FINAL_VERSION\"/" pyproject.toml
          echo "Updated version to $FINAL_VERSION in pyproject.toml"

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Release v$FINAL_VERSION" || echo "No changes to commit"
          git push origin main

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po '^version = "\K[^"]+' pyproject.toml | head -1)
          echo "Extracted version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Prepare release version
        id: release_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          # Remove 'beta', 'b1', or any pre-release suffix
          RELEASE_VERSION=$(echo "$CURRENT_VERSION" | sed -E 's/(beta.*|b[0-9]+.*)$//')
          # Remove trailing dot if present (e.g., 0.4.0.)
          RELEASE_VERSION=$(echo "$RELEASE_VERSION" | sed 's/\.$//')
          echo "Release version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Configure Github Actions Bot user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and update pyproject.toml to beta
        id: bump_beta
        run: |
          CURRENT_VERSION=$(grep -Po '^version = "\K[^"]+' pyproject.toml | head -1)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed -E 's/(beta.*|b[0-9]+.*)$//')
          BASE_VERSION=$(echo "$BASE_VERSION" | sed 's/\.$//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=${PATCH:-0}
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}beta"
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set branch name with new beta version
        id: set_branch
        run: |
          NEW_VERSION="${{ steps.bump_beta.outputs.new_version }}"
          echo "branch_name=beta-release-v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and checkout beta branch
        run: |
          git checkout -b "${{ steps.set_branch.outputs.branch_name }}"

      - name: Commit and push changes
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "Beta release v${{ steps.bump_beta.outputs.new_version }}" || echo "No changes to commit"
          git push origin "${{ steps.set_branch.outputs.branch_name }}"

      - name: Create PR on GitHub
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NEW_VERSION="${{ steps.release_version.outputs.release_version }}"
          ORIG_VERSION="${{ steps.release_version.outputs.release_version }}"
          
          # Read the PR template and only replace the unique placeholder
          PR_BODY=$(cat .github/PULL_REQUEST_TEMPLATE.md | sed "s/{{RELEASE_SUMMARY}}/Release version bump from v$ORIG_VERSION to v$NEW_VERSION/")
          
          gh pr create \
            --title "Release v$NEW_VERSION" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.set_branch.outputs.branch_name }}" \
            --draft
