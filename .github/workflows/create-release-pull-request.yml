name: Create Release Pull Request

on:
  # Allow manual trigger, e.g. for testing. This can be changed to a cron job in the future, or some other custom trigger.
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if merge is from beta branch
        id: check_beta
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          SRC_BRANCH=$(echo "$COMMIT_MSG" | grep -oE 'from [^ ]+' | awk '{print $2}')
          CLEAN_BRANCH=$(basename "$SRC_BRANCH")
          echo "Source branch: $CLEAN_BRANCH"
          if [[ -z "$CLEAN_BRANCH" ]] || [[ "$CLEAN_BRANCH" != *beta* ]]; then
            echo "Not a merge from a beta branch. Skipping workflow."
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "is_beta=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "is_beta=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract bump type from source branch or input
        if: steps.check_beta.outputs.skip == 'false'
        id: bump_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump_type=${{ github.event.inputs.bump_type }}" >> $GITHUB_OUTPUT
          else
            COMMIT_MSG=$(git log -1 --pretty=%B)
            SRC_BRANCH=$(echo "$COMMIT_MSG" | grep -oE 'from [^ ]+' | awk '{print $2}')
            CLEAN_BRANCH=$(basename "$SRC_BRANCH")
            BUMP_TYPE=$(echo "$CLEAN_BRANCH" | grep -oE '(patch|minor|major)' || echo "patch")
            echo "Bump type: $BUMP_TYPE"
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_beta.outputs.skip == 'false'
        uses: actions/setup-python@v3

      - name: Install uv
        if: steps.check_beta.outputs.skip == 'false'
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install the project
        if: steps.check_beta.outputs.skip == 'false'

        run: uv sync --all-extras --dev

      - name: Install tox
        if: steps.check_beta.outputs.skip == 'false'

        run: pip install tox

      - name: Run tox
        if: steps.check_beta.outputs.skip == 'false'

        run: tox

      - name: Get current version
        if: steps.check_beta.outputs.skip == 'false'
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]+' pyproject.toml)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.check_beta.outputs.skip == 'false'
        id: bump_version
        run: |
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          echo "Bump type: $BUMP_TYPE"
          IFS='.' read -r -a version_parts <<< "${{ steps.current_version.outputs.version }}"
          for part in "${version_parts[@]}"; do
            if ! [[ $part =~ ^[0-9]+$ ]]; then
              echo "Error: Version part '$part' is not a valid number"
              exit 1
            fi
          done
          ORIG_VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          case "$BUMP_TYPE" in
            major)
              ((version_parts[0]++))
              version_parts[1]=0
              version_parts[2]=0
              ;;
            minor)
              ((version_parts[1]++))
              version_parts[2]=0
              ;;
            patch)
              ((version_parts[2]++))
              ;;
          esac
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          if ! python -c "from packaging import version; assert version.parse('$NEW_VERSION') > version.parse('$ORIG_VERSION'), 'New version must be greater than current version'"; then
            echo "Error: New version '$NEW_VERSION' is not greater than current version '$ORIG_VERSION'"
            exit 1
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "orig_version=$ORIG_VERSION" >> $GITHUB_OUTPUT

      - name: Configure Github Actions Bot user
        if: steps.check_beta.outputs.skip == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set branch name
        if: steps.check_beta.outputs.skip == 'false'
        id: set_branch
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          echo "branch_name=release-v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        if: steps.check_beta.outputs.skip == 'false'
        run: |
          ORIG_VERSION="${{ steps.bump_version.outputs.orig_version }}"
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          sed -i "s/version = \"$ORIG_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Update CHANGELOG.md
        if: steps.check_beta.outputs.skip == 'false'
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          TITLE="$NEW_VERSION"
          
          {
            echo "## $TITLE"
            echo ""
            git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"- %s"
            echo ""
          } > NEW_CHANGELOG.md
          awk 'NR==1{print; system("cat NEW_CHANGELOG.md"); next} 1' CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
          rm NEW_CHANGELOG.md

      - name: Commit and push changes
        if: steps.check_beta.outputs.skip == 'false'
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin ${{ steps.set_branch.outputs.branch_name }}

      - name: Create PR on GitHub
        if: steps.check_beta.outputs.skip == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NEW_VERSION="${{ steps.bump_version.outputs.new_version }}"
          ORIG_VERSION="${{ steps.bump_version.outputs.orig_version }}"
          
          # Read the PR template and only replace the unique placeholder
          PR_BODY=$(cat .github/PULL_REQUEST_TEMPLATE.md | sed "s/{{RELEASE_SUMMARY}}/Release version bump from v$ORIG_VERSION to v$NEW_VERSION/")
          
          gh pr create \
            --title "Release v$NEW_VERSION" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.set_branch.outputs.branch_name }}" \
            --draft
