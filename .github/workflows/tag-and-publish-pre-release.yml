name: Create Pre-Release Tag and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
      
permissions:
  contents: write
  packages: write
  id-token: write  # Required for PyPI publishing

jobs:
  create-tag:
    # Only run if this is a merge from a beta release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'release-v') &&
      contains(github.event.head_commit.message, 'beta')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      version: ${{ steps.create_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Create and push tag
      - name: Create and push tag
        id: create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get version from commit message
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'release-v[0-9.]*' | cut -d'v' -f2)
          
          # For beta releases, find the latest beta number and increment
          LATEST_BETA=$(git tag -l "v$VERSION.beta*" | sort -V | tail -n 1)
          if [[ -z "$LATEST_BETA" ]]; then
            BETA_NUM=1
          else
            BETA_NUM=$(echo "$LATEST_BETA" | grep -o 'beta[0-9]*' | cut -d'b' -f2)
            BETA_NUM=$((BETA_NUM + 1))
          fi
          TAG_VERSION="$VERSION.beta$BETA_NUM"
          TAG_MESSAGE="Beta Release v$TAG_VERSION"
          
          # Create and push tag
          git tag -a "v$TAG_VERSION" -m "$TAG_MESSAGE"
          git push origin "v$TAG_VERSION"
          
          # Output the tag and version for the next step
          echo "tag=v$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: create-tag
    runs-on: ubuntu-latest
    environment: testpypi
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run Tests
        run: uv run pytest --cov=hello_world --cov-report=term-missing --cov-fail-under=80

      # Create temporary pyproject.toml for beta build
      - name: Prepare beta build
        id: prepare_build
        run: |
          # Get base version from branch name
          BASE_VERSION="${{ needs.create-tag.outputs.version }}"
          # Convert to beta format (matching pyproject.toml format)
          PYPI_VERSION="${BASE_VERSION}beta"
          echo "Converting version: $BASE_VERSION -> $PYPI_VERSION"
          echo "version=$PYPI_VERSION" >> $GITHUB_ENV
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.create-tag.outputs.tag }}"
          
          # Generate release notes
          if [ -n "$PREV_TAG" ]; then
            echo "Generating notes from $PREV_TAG to $CURRENT_TAG"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          else
            echo "No previous tag found, using all commits"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Save release notes for GitHub release
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Backup original files
          cp pyproject.toml pyproject.toml.bak
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md CHANGELOG.md.bak
          fi
          
          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$PYPI_VERSION\"/" pyproject.toml
          
          # Update CHANGELOG.md with new version and release notes
          {
            echo "# Changelog"
            echo ""
            echo "## [$PYPI_VERSION] - $(date +%Y-%m-%d)"
            echo ""
            echo "$RELEASE_NOTES"
            echo ""
            if [ -f CHANGELOG.md ]; then
              cat CHANGELOG.md
            fi
          } > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md

      - name: Build the artifact in dist/
        run: uv build

      # Restore original files
      - name: Cleanup
        if: always()
        run: |
          if [ -f pyproject.toml.bak ]; then
            mv pyproject.toml.bak pyproject.toml
          fi
          if [ -f CHANGELOG.md.bak ]; then
            mv CHANGELOG.md.bak CHANGELOG.md
          fi

      # Publish to TestPyPI
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-tag.outputs.tag }}
          name: "Beta Release v${{ needs.create-tag.outputs.tag }}"
          body: ${{ steps.prepare_build.outputs.notes }}
          draft: false
          prerelease: true
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
