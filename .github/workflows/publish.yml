name: Publish Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0 or 1.0.0-beta.1)'
        required: true
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - stable
          - beta
          - alpha
  push:
    tags:
      - 'v*'  # Matches version tags like v1.0.0, v1.0.0-beta.1, etc.
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  publish:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release-v'))
    environment: pypi
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Download build artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-and-test.yml
          name: dist
          path: dist
          branch: main  # Get artifacts from main branch

      - name: Get version info
        id: version_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            if [[ "${{ github.event.inputs.release_type }}" == "beta" || "${{ github.event.inputs.release_type }}" == "alpha" ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              # Get version from tag
              VERSION=${GITHUB_REF#refs/tags/v}
              if [[ $VERSION == *-beta* || $VERSION == *-alpha* ]]; then
                echo "is_prerelease=true" >> $GITHUB_OUTPUT
              else
                echo "is_prerelease=false" >> $GITHUB_OUTPUT
              fi
            else
              # For branch pushes, get version from package
              VERSION=$(python -c 'import tomli; print(tomli.load(open("pyproject.toml", "rb"))["project"]["version"])')
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Get changelog from tag message if it exists
          if [ "${{ github.event_name }}" = "push" ]; then
            NOTES=$(git tag -l --format='%(contents)' "v$VERSION")
            echo "notes=$NOTES" >> $GITHUB_OUTPUT
          else
            echo "notes=Manual release of version $VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check package existence
        id: check_package
        run: |
          PACKAGE_NAME="bjones-testing-actions"
          VERSION="${{ steps.version_info.outputs.version }}"
          BASE_URL="https://pypi.org"
          
          if curl -s "$BASE_URL/pypi/$PACKAGE_NAME/$VERSION/json" | grep -q '"version":"'; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to TestPyPI (for beta/alpha)
        if: steps.check_package.outputs.exists != 'true' && steps.version_info.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Run package compatibility test
        if: steps.check_package.outputs.exists != 'true'
        run: |
          pip install pytest pytest-asyncio pytest-cov
          PYPI_TYPE=pypi pytest tests/test_pypi_package.py -v

      - name: Publish to PyPI
        if: steps.check_package.outputs.exists != 'true' && success()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          verbose: true

      - name: Run tests
        run: |
          python -m pytest tests/test_pypi_package.py -v

      - name: Clean up coverage files
        run: |
          rm -f .coverage*
          rm -f coverage.xml
          rm -rf htmlcov/
