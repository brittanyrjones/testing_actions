name: Create Pre-Release Tag

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  create-tag:
    # Only run if this is a merge from a beta release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'release-v') &&
      contains(github.event.head_commit.message, 'beta')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 
        uses: actions/setup-python@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev

      # Create and push tag
      - name: Create and push tag
        id: create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get version from commit message
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'release-v[0-9.]*' | cut -d'v' -f2)
          
          # For beta releases, find the latest beta number and increment
          LATEST_BETA=$(git tag -l "v$VERSION.beta*" | sort -V | tail -n 1)
          if [[ -z "$LATEST_BETA" ]]; then
            BETA_NUM=1
          else
            BETA_NUM=$(echo "$LATEST_BETA" | grep -o 'beta[0-9]*' | cut -d'b' -f2)
            BETA_NUM=$((BETA_NUM + 1))
          fi
          TAG_VERSION="$VERSION.beta$BETA_NUM"
          TAG_MESSAGE="Beta Release v$TAG_VERSION"
          
          # Create and push tag
          git tag -a "v$TAG_VERSION" -m "$TAG_MESSAGE"
          git push origin "v$TAG_VERSION"
          
          # Output the tag for the next step
          echo "tag=v$TAG_VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: create-tag
    runs-on: ubuntu-latest
    environment: testpypi
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run Tests
        run: uv run pytest --cov=hello_world --cov-report=term-missing --cov-fail-under=80
      - name: Build the artifact in dist/
        run: uv build

      # Get version from tag and format it according to PEP 440
      - name: Get version
        id: get_version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract version from tag
            TAG=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix
            VERSION=${TAG#v}
            # Convert to PEP 440 format
            if [[ $VERSION =~ ^([0-9]+\.[0-9]+\.[0-9]+)beta$ ]]; then
              VERSION="${BASH_REMATCH[1]}b0"
            elif [[ $VERSION =~ ^([0-9]+\.[0-9]+\.[0-9]+)\.beta([0-9]+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}b${BASH_REMATCH[2]}"
            else
              echo "Invalid version format: $VERSION"
              exit 1
            fi
          else
            # For main branch, just use a placeholder version for validation
            VERSION="0.0.0b0"
          fi
          echo "version=$VERSION" >> $GITHUB_ENV

      # Publish to TestPyPI
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Beta Release ${{ github.ref_name }}"
          body_path: CHANGELOG.md
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
