name: Create Release Candidate

# Manual trigger for RC releases
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Base version (e.g., 1.0.0)'
        required: true
      rc_number:
        description: 'Release candidate number (e.g., 1 for rc1)'
        required: true
        type: number
        default: 1
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-rc:
    runs-on: ubuntu-latest
    steps:
      # Checkout code with full history for changelog generation
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install build dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Format version with rc suffix
      - name: Extract version info
        id: version
        run: |
          echo "VERSION=${{ github.event.inputs.version }}rc${{ github.event.inputs.rc_number }}" >> $GITHUB_OUTPUT

      # Validate version format
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$ ]]; then
            echo "Invalid version format. Expected format: X.Y.ZrcN"
            exit 1
          fi

      # Create feature branch for the RC
      - name: Create release branch
        run: |
          git checkout -b "release-v${{ steps.version.outputs.VERSION }}"

      # Update version in pyproject.toml
      # Note: Unlike pre-releases, RCs do update the project version
      - name: Update version in pyproject.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.VERSION }}\"/" pyproject.toml

      # Get last tag for changelog generation
      - name: Get last tag
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_OUTPUT

      # Generate changelog from git history
      - name: Generate changelog
        run: |
          if [ -n "${{ steps.last_tag.outputs.LAST_TAG }}" ]; then
            git log --graph --format="%h %s" "${{ steps.last_tag.outputs.LAST_TAG }}..HEAD" > CHANGELOG.md
          else
            git log --graph --format="%h %s" > CHANGELOG.md
          fi

      # Create preliminary release notes
      # Note: RCs allow preliminary documentation updates
      - name: Create release notes
        run: |
          mkdir -p releasenotes/package_name
          echo "Release Candidate ${{ github.event.inputs.rc_number }} for ${{ github.event.inputs.version }}" > "releasenotes/package_name/v${{ steps.version.outputs.VERSION }}"

      # Check for outdated dependencies
      - name: Check dependencies
        run: |
          pip install pip-tools
          pip-compile --upgrade --dry-run pyproject.toml

      # Run tests to ensure quality
      - name: Run tests
        run: |
          python -m pip install -e .
          python -m pytest

      # Build package for PyPI
      - name: Build package
        run: python -m build

      # Create PR for review
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Release Candidate v${{ steps.version.outputs.VERSION }}"
          title: "Release Candidate v${{ steps.version.outputs.VERSION }}"
          body: |
            Release Candidate version bump and documentation updates.
            
            Changes:
            - Updated version to ${{ steps.version.outputs.VERSION }}
            - Generated changelog
            - Created preliminary release notes
            - Built package
            - Checked for outdated dependencies
          branch: "release-v${{ steps.version.outputs.VERSION }}"
          base: main
          draft: true 
