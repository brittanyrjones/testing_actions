name: Create Pre-Release Tag and Publish

on:
  workflow_dispatch:
    inputs:
      previous_version:
        description: 'Previous version (e.g., 0.3.28)'
        required: true
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
  push:
    branches:
      - main
      
permissions:
  contents: write
  packages: write
  id-token: write  # Required for PyPI publishing

jobs:
  create-tag:
    # Only run if this is a merge from a beta release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'Release') &&
      contains(github.event.head_commit.message, 'beta')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      version: ${{ steps.create_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Create and push tag
      - name: Create and push tag
        id: create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get version from commit message or workflow inputs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Get previous version and bump type from inputs
            PREV_VERSION="${{ github.event.inputs.previous_version }}"
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            
            # Split version into components
            IFS='.' read -r -a VERSION_PARTS <<< "$PREV_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            # Generate new version based on bump type
            case "$BUMP_TYPE" in
              major)
                VERSION="$((MAJOR + 1)).0.0"
                ;;
              minor)
                VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          else
            # Get version from commit message for push events
            VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'release-v[0-9.]*' | cut -d'v' -f2)
          fi
          echo "Found version: $VERSION"
          
          # For beta releases, find the latest beta number and increment
          LATEST_BETA=$(git tag -l "$VERSION-beta*" | sort -V | tail -n 1)
          if [[ -z "$LATEST_BETA" ]]; then
            BETA_NUM=1
          else
            BETA_NUM=$(echo "$LATEST_BETA" | grep -o 'beta[0-9]*' | cut -d'b' -f2)
            BETA_NUM=$((BETA_NUM + 1))
          fi
          TAG_VERSION="$VERSION-beta$BETA_NUM"
          TAG_MESSAGE="Beta Release $TAG_VERSION"
          
          # Create and push tag
          git tag -a "$TAG_VERSION" -m "$TAG_MESSAGE"
          git push origin "$TAG_VERSION"
          
          # Output the tag and version for the next step
          echo "tag=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  release-prerelease:
    needs: create-tag
    runs-on: ubuntu-latest
    environment: testpypi
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev

      # Create temporary pyproject.toml for beta build
      - name: Prepare beta build
        id: prepare_build
        run: |
          # Get base version from branch name
          BASE_VERSION="${{ needs.create-tag.outputs.version }}"
          # Convert to beta format (matching pyproject.toml format)
          PYPI_VERSION="${BASE_VERSION}-beta"
          echo "Converting version: $BASE_VERSION -> $PYPI_VERSION"
          echo "version=$PYPI_VERSION" >> $GITHUB_ENV
          
          # Get the previous tag
          echo "Available tags:"
          git tag -l "v*"
          echo "Current tag: ${{ needs.create-tag.outputs.tag }}"
          PREV_TAG=$(git tag -l "v*" | sort -V | grep -B1 "${{ needs.create-tag.outputs.tag }}" | head -n 1 || echo "")
          echo "Previous tag: $PREV_TAG"
          CURRENT_TAG="${{ needs.create-tag.outputs.tag }}"
          
          # Generate release notes for changelog and release
          if [ -n "$PREV_TAG" ]; then
            echo "Generating notes from $PREV_TAG to $CURRENT_TAG"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          else
            echo "No previous tag found, using all commits"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Save release notes for GitHub release
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Backup original files
          cp pyproject.toml pyproject.toml.bak
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md CHANGELOG.md.bak
          fi
          
          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$PYPI_VERSION\"/" pyproject.toml
          
          # Update CHANGELOG.md with new version and release notes
          {
            echo "# Changelog"
            echo ""
            echo "## [$PYPI_VERSION] - $(date +%Y-%m-%d)"
            echo ""
            echo "$RELEASE_NOTES"
            echo ""
            if [ -f CHANGELOG.md ]; then
              cat CHANGELOG.md
            fi
          } > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md
      - name: Run Tests
        run: uv run pytest --cov=hello_world --cov-report=term-missing --cov-fail-under=80
      - name: Build the artifact in dist/
        run: uv build

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          name: "Beta Release ${{ needs.create-tag.outputs.tag }}"
          body: ${{ steps.prepare_build.outputs.notes }}
          draft: false
          prerelease: true
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
