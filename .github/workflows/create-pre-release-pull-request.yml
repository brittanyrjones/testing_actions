name: Create beta Release Branch

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Branch to create beta release from'
        required: true
        default: 'main'

jobs:
  create-beta-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]+' pyproject.toml)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate beta version
        id: calc_version
        run: |
          IFS='.' read -r -a version_parts <<< "${{ steps.current_version.outputs.version }}"
          ((version_parts[1]++))
          version_parts[2]=0
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Set branch name
        id: set_branch
        run: |
          echo "branch_name=beta-release-v${{ steps.calc_version.outputs.new_version }}" >> $GITHUB_OUTPUT

      - name: Create and checkout beta release branch
        run: |
          git checkout -b "${{ steps.set_branch.outputs.branch_name }}"

      - name: Update Changelog
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          # Prepare new changelog section
          {
            echo "## $NEW_VERSION (Beta)"
            echo ""
            git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"- %s"
            echo ""
          } > NEW_CHANGELOG.md

          # Insert after the first line (# Changelog)
          awk 'NR==1{print; system("cat NEW_CHANGELOG.md"); next} 1' CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
          rm NEW_CHANGELOG.md

      - name: Update pyproject.toml version
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          # Update the version in pyproject.toml
          sed -i.bak "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          rm pyproject.toml.bak

      - name: Commit Changelog and Version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md pyproject.toml
          git commit -m "Update CHANGELOG.md and pyproject.toml for version ${{ steps.calc_version.outputs.new_version }}"
          git push origin "beta-release-v${{ steps.calc_version.outputs.new_version }}"
  
      - name: push beta release branch
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          BRANCH_NAME="beta-release-v$NEW_VERSION"
          git push origin "$BRANCH_NAME"

      - name: Create PR on GitHub
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
          ORIG_VERSION="${{ steps.current_version.outputs.version }}"
          
          # Read the PR template and only replace the unique placeholder
          PR_BODY=$(cat .github/PULL_REQUEST_TEMPLATE.md | sed "s/{{RELEASE_SUMMARY}}/Release version bump from v$ORIG_VERSION to v$NEW_VERSION/")
          
          gh pr create \
            --title "Release v$NEW_VERSION" \
            --body "$PR_BODY" \
            --base main \
            --head "beta-release-v$NEW_VERSION" \
            --draft

      - name: Release to Github
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: ${{ contains(github.ref, 'beta') }}
          prerelease: ${{ contains(github.ref, 'beta') }}
          name: ${{ contains(github.ref, 'beta') && format('Beta Release {0}', github.ref_name) || github.ref_name }}
          body: ${{ contains(github.ref, 'beta') && 'This is a beta release and is not production ready.' || '' }}

      - name: Publish to TestPyPI
        if: startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'beta')
        run: uv publish --repository-url https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'beta')
        run: uv publish
