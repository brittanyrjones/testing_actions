name: Check for Release Merge Event

on:
  push:
    branches:
      - main

jobs:
  check-for-release-merge:
    # Only run if this is a merge from a release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'release-v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      # Get version from pyproject.toml
      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check branch name and create tag
        run: |
          # Extract source branch name from merge commit message
          SOURCE_BRANCH=$(echo "${{ github.event.head_commit.message }}" | grep -o 'from .*' | cut -d' ' -f2)
          
          if [[ "$SOURCE_BRANCH" == *"beta"* ]]; then
            echo "Creating beta tag and triggering beta release workflow"
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            # Create tag with prerelease flag
            git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Beta Release v${{ steps.get_version.outputs.VERSION }}" --annotate
            git push origin "v${{ steps.get_version.outputs.VERSION }}"
          elif [[ "$SOURCE_BRANCH" == *"release-v"* ]]; then
            echo "Creating stable tag and triggering stable release workflow"
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Release v${{ steps.get_version.outputs.VERSION }}"
            git push origin "v${{ steps.get_version.outputs.VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
