name: Create Release Tag and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  id-token: write  # Required for PyPI publishing

jobs:
  create-tag:
    # Only run if this is a merge from a stable release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'Release') &&
      !contains(github.event.head_commit.message, 'beta')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 
        uses: actions/setup-python@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev

      # Create and push tag
      - name: Create and push tag
        id: create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get version from commit message
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'release-v[0-9.]*' | cut -d'v' -f2)
          echo "Found version: $VERSION"
          
          TAG_VERSION="v$VERSION"
          TAG_MESSAGE="Release v$TAG_VERSION"
          
          # Create and push tag
          git tag -a "$TAG_VERSION" -m "$TAG_MESSAGE"
          git push origin "$TAG_VERSION"
          
          # Output the tag for the next step
          echo "tag=$TAG_VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run Tests
        run: uv run pytest --cov=hello_world --cov-report=term-missing --cov-fail-under=80

      # Create temporary pyproject.toml for build
      - name: Prepare build
        id: prepare_build
        run: |
          # Get version from commit message
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'release-v[0-9.]*' | cut -d'v' -f2)
          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV
          
          # Backup original pyproject.toml
          cp pyproject.toml pyproject.toml.bak
          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Build the artifact in dist/
        run: uv build

      # Restore original pyproject.toml
      - name: Cleanup
        if: always()
        run: |
          if [ -f pyproject.toml.bak ]; then
            mv pyproject.toml.bak pyproject.toml
          fi

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          name: "Release ${{ needs.create-tag.outputs.tag }}"
          body: "Release ${{ needs.create-tag.outputs.tag }}"
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
