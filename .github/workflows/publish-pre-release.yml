name: Publish Pre-release

# Trigger on PR merges to main
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  validate-and-publish:
    # Only run if PR was merged (not just closed) and is from a pre-release branch
    if: |
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.title, 'Beta Testing')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Extract version from pyproject.toml
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Check if this is a pre-release version
      - name: Check if pre-release
        id: check_prerelease
        run: |
          if [[ "${{ steps.get_version.outputs.VERSION }}" == *"beta"* ]] || [[ "${{ steps.get_version.outputs.VERSION }}" == *"alpha"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      # Build package for PyPI
      - name: Build package
        if: steps.check_prerelease.outputs.is_prerelease == 'true'
        run: python -m build

      # Publish to TestPyPI
      - name: Publish to TestPyPI
        if: steps.check_prerelease.outputs.is_prerelease == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*

      # Update merge commit status
      - name: Update merge commit status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            
            if (pr && pr.merged) {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: pr.merge_commit_sha,
                state: process.env.JOB_STATUS === 'success' ? 'success' : 'failure',
                context: 'Publish Pre-release',
                description: process.env.JOB_STATUS === 'success' ? 'Pre-release published successfully' : 'Pre-release publish failed'
              });
            }
        env:
          JOB_STATUS: ${{ job.status }}

