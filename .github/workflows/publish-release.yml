name: Publish Release

# Trigger on closed pull requests
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  validate-and-publish:
    # Only run if PR was merged (not just closed) and is a release PR
    if: |
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.title, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Extract version from pyproject.toml
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Check if this is a stable version (no rc, beta, or alpha)
      - name: Check if stable version
        id: check_stable
        run: |
          if [[ ! "${{ steps.get_version.outputs.VERSION }}" =~ (rc|beta|alpha) ]]; then
            echo "is_stable=true" >> $GITHUB_OUTPUT
          else
            echo "is_stable=false" >> $GITHUB_OUTPUT
          fi

      # Build package for PyPI
      - name: Build package
        if: steps.check_stable.outputs.is_stable == 'true'
        run: python -m build

      # Publish to PyPI
      - name: Publish to PyPI
        if: steps.check_stable.outputs.is_stable == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release v${{ steps.get_version.outputs.VERSION }}"
          body_path: CHANGELOG.md
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
