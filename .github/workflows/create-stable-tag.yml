name: Create Stable Tag

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  create-tag:
    # Only run if this is a merge from a stable release branch
    if: |
      contains(github.event.head_commit.message, 'Merge pull request') &&
      contains(github.event.head_commit.message, 'Release') &&
      !contains(github.event.head_commit.message, 'beta')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 
        uses: actions/setup-python@v3
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev

      # Create and push tag
      - name: Create and push tag
        id: create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get version from pyproject.toml
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION="v$VERSION"
          TAG_MESSAGE="Release v$TAG_VERSION"
          
          # Create and push tag
          git tag -a "$TAG_VERSION" -m "$TAG_MESSAGE"
          git push origin "$TAG_VERSION"
          
          # Output the tag for the next step
          echo "tag=$TAG_VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Run Tests
        run: uv run pytest --cov=hello_world --cov-report=term-missing --cov-fail-under=80
      - name: Build the artifact in dist/
        run: uv build

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ github.ref_name }}"
          body_path: CHANGELOG.md
          draft: true
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
